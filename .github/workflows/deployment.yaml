name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
    paths:
      - 'app.js'
  workflow_dispatch:
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}                    # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ secrets.ECR_NAME }}                  # set this to your Amazon ECR repository name
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}                  # set this to your Amazon ECS service name
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}                  # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}  # set this to the path to your Amazon ECS task definition
                                                           # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}                # set this to the name of the container in the
                                                           # containerDefinitions section of your task definition

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          
      - name: Get ID of currently running task
        run: echo "TASK_ID=$(aws ecs list-tasks --cluster endyBot_cluster --service app --desired-status RUNNING --output json | jq -r '.taskArns[]' | sed 's|.*/||')" >> "$GITHUB_ENV"
        
      - name: Stop old task
        run: aws ecs stop-task --cluster endyBot_cluster --task ${{ env.TASK_ID }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
